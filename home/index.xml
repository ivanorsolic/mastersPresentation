<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homes on </title>
    <link>https://ivanorsolic.github.io/mastersPresentation/home/</link>
    <description>Recent content in Homes on </description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ivanorsolic.github.io/mastersPresentation/home/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/intro/</guid>
      <description>Why a self-driving RC car? üõà Video source: Waymo, Sensor Visualization What to look for in an RC car?   üìê Scale      üèéÔ∏è Body type      ‚öôÔ∏è Electric motor type      ü¶æ Steering servo      üö• Electronic Speed Controller      ‚ö°üîã Batteries    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/rc-cars-primer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/rc-cars-primer/</guid>
      <description>Bill of materials  An RC car  Charger and batteries  A PWM/Servo Driver (I2C + some jumper cables)  A Jetson Nano  A powerbank (+ some usb cables)  A microSD card (and optionally an external SSD)  A WiFi/BT m.2 card (key E) or some USB equivalent  A camera---## An Xbox/PS/PC gamepad&amp;ndash;
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/rc-car-assembly/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/rc-car-assembly/</guid>
      <description>Assembling the RC car  RTR Kit  Wheel base  Mounting the wheels  Mounting the wheels   Assembling the mounting plates  Option 1: 3D Printed parts  Option 2: Custom made mounting plates  3D model of the custom mounting plates  Power tools  Drilled mounting plates  (Semi) Finished car   Jetson Nano assembly  Taking out the Nano module  MicroSD slot  Adding the fan  Adding the WLAN/BT card   Connecting the RC car to the Jetson Nano  The schematic  Finding the ESC/Servo  Wireless receiver  PCA9685  ESC -&amp;gt; PCA9685  PCA9682 I2C Port  Jetson Nano I2C Pins  PCA9685 -&amp;gt; Jetson Nano  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/donkey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/donkey/</guid>
      <description>DonkeyCar  What is Donkey? Donkey is a high level self driving library written in Python.
 How was it used? It was used as an interface between the RC car and the neural net that controls the car.
 Things Donkey solves:  üì∑Data preprocessing     üéÆControlling the RC car     ‚úÖData collection/labeling     üèãÔ∏è‚Äç‚ôÇÔ∏èCustom model training     Question: RC Car only or Host PC + RC ‚ùì    Donkey RC calibration  Steering calibration  Throttle calibration  Gamepad steering  Gamepad Throttle  Sanity check  First test track  Fancier test track  Collecting training data  First basic autopilot  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/simulator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/simulator/</guid>
      <description>Custom simulator  Why use a simulator? Pretty simple: rapid prototyping in a safe and reproducible environment.
üí° Fun fact: Tesla spends a lot of time and money on their simulator.
 Caveat emptor:
Real data has no substitutes.  What makes a good sim  Image resolution  Real-world fidelity Physics? Model translation?
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/nvidia-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/nvidia-model/</guid>
      <description>DARPA Grand Challenge 2004  First neural network  Dave (DARPA Autonomous Vehicle) An RC Car with two cameras autonomously driving through a junk-filled alley way.
 DAVE-2 Architecture   Slight adjustions made:   ‚úÇ Omitted the normalization layer for now.      ‚ûïAdded a 25 unit and a 5 unit layer.      üí§ Added dropout regularization (90%).      üöôüí®Two output units for steering and throttle.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/architecture-proposal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/architecture-proposal/</guid>
      <description>Architecture proposal  &amp;ldquo;Hydra&amp;rdquo;-like nets  Tesla&#39;s similar nets  First iteration .cls-1,.cls-5{fill:none;}.cls-1,.cls-2,.cls-3,.cls-4,.cls-5,.cls-7{stroke:#000;}.cls-1,.cls-4,.cls-5{stroke-opacity:0.8;}.cls-1{stroke-width:0.5px;}.cls-2{fill:#a0a0a0;}.cls-2,.cls-3,.cls-4,.cls-5{stroke-miterlimit:3.03;}.cls-2,.cls-3,.cls-4{stroke-width:0.76px;}.cls-2,.cls-3,.cls-7{opacity:0.8;}.cls-2,.cls-3,.cls-6,.cls-7,.cls-8{isolation:isolate;}.cls-3,.cls-7{fill:#e0e0e0;}.cls-4{fill-opacity:0;}.cls-5{stroke-width:0.38px;}.cls-6{font-size:12.13px;}.cls-6,.cls-8{font-family:ArialMT, Arial;}.cls-8{font-size:16px;}nnWithoutBehaviorimageInputConvolution1Convolution2Convolution3Convolution4Convolution53@180x32024@88x15832@42x7764@19x3764@17x3564@15x331x100Convolution1Convolution2Convolution3Convolution4Convolution53@180x32024@88x15832@42x7764@19x3764@17x3564@15x331x1001x1001x501x2laneInputConcatenateDenseDenseDenseDensesteering_outthrottle_out1x200
 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/lane-finding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/lane-finding/</guid>
      <description>Lane extraction  Mapping the 3D world to 2D  Parallel?  Another example  Parallel?  Train dronez?  Warping the perspective  First step: ROI  Second step: target perspective  Final step: transform  Making the lines easier to see  Converting to HSL color space  Split into separate channels  Threshold the S-channel  The entire process  Going one step further?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/behaviours/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/behaviours/</guid>
      <description>Behavioural subnetwork  The architecture  Implementation # New input layerbehaviourInput = Input(shape=(numberOfBehaviourInputs,), name=&amp;quot;behaviourInput&amp;quot;)# ConvNet parts ...# Behavioural netz = behaviourInputz = Dense(numberOfBehaviourInputs * 2, activation=&#39;relu&#39;)(z)z = Dense(numberOfBehaviourInputs * 2, activation=&#39;relu&#39;)(z)z = Dense(numberOfBehaviourInputs * 2, activation=&#39;relu&#39;)(z)# Concatenating the convolutional networks with the behavioural networko = Concatenate(axis=1)([z, c])o = Dense(100, activation=&#39;relu&#39;)(o)o = Dense(50, activation=&#39;relu&#39;)(o)# Output layers ...# Update the model inputsmodel = Model(inputs=[imageInput, laneInput, behaviourInput], outputs=[steering_out, throttle_out])   Training  7k records with approx.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ivanorsolic.github.io/mastersPresentation/home/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ivanorsolic.github.io/mastersPresentation/home/demo/</guid>
      <description>Further avenues  Advanced lane finding with object recognition  Advanced object recognition  Data augmentation via neural art style transfer  Data augmentation via neural art style transfer  That&#39;s it folks.  </description>
    </item>
    
  </channel>
</rss>